<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
    <!-- @Controller解析 -->                    
    <mvc:annotation-driven>
    	 <mvc:message-converters>  
            <ref bean="stringHttpMessageConverter" />  
        </mvc:message-converters>  
    </mvc:annotation-driven>  
    <!-- 不拦截静态资源配置 --> 
    <mvc:default-servlet-handler/>    
    <!-- responseBody中文乱码 -->

	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.mj.report">
		<!-- Service注解给去掉 -->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />   
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />   
	</context:component-scan>
	<!--json数据请求解析 ,4.x版本文更改为MappingJackson2HttpMessageConverter-->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json;charset=UTF-8</value>  
			</list>
		</property>
	</bean>
	<!-- 启动SpringMVC的注解功能，完成请求和注解model的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />	<!-- JSON转换器 -->
			</list>
		</property>
	</bean>
	
	<!-- @responseBody 乱码解析-->
	<bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">  
        <constructor-arg value="UTF-8" index="0"/>
        <!--  避免出现乱码 -->  
        <property name="supportedMediaTypes">  
            <list>  
                <value>text/plain;charset=UTF-8</value>  
            </list>  
        </property>  
    </bean>  
	
	 <!-- freemarker读取配置文件 -->
	 <bean id="freemarkerConfiguration" class="org.springframework.beans.factory.config.PropertiesFactoryBean">  
        <property name="location" value="classpath:freemarker.properties" />  
    </bean>  
<!--     <bean id="initOperator" class="com.mj.report.util.Constants"/> -->
    <bean id="freemarkerResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="order" value="1" />
<!--    <property name="prefix" value="" /> -->
        <property name="suffix" value=".html" />
        <property name="contentType" value="text/html;charset=utf-8" />
        <property name="viewClass">
            <value>org.springframework.web.servlet.view.freemarker.FreeMarkerView</value>
        </property>
        <property name="exposeRequestAttributes" value="true"/><!-- 是否启用request请求 -->
        <property name="requestContextAttribute" value="req"/><!-- requestContext别名 -->
    </bean>
    
<!--      <bean  class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"> -->
     <bean  class="com.mj.report.security.freemarker.ShiroTagFreeMarkerConfigurer">
    	<!--加载路径  -->
        <property name="templateLoaderPath" value="WEB-INF/views/"></property>
        <!-- 引入配置 -->
        <property name="freemarkerSettings" ref="freemarkerConfiguration"></property>  
    </bean>
	
	<!-- 定义跳转的文件的前后缀 ，视图模式配置-->
<!-- 	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> -->
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
<!-- 		<property name="prefix" value="/WEB-INF/jsp/" /> -->
<!-- 		<property name="suffix" value=".jsp" /> -->
<!-- 	</bean> -->
	
	<!-- 配置文件上传 -->
	<bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />  
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000" />  
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />  
    </bean>
    <!-- 拦截器配置 -->
     <mvc:interceptors> 
 	     <mvc:interceptor> 
 	     	<!-- 后台页头信息 -->
 	         <mvc:mapping path="/user/touserlist"/> 
 	         <mvc:mapping path="/sessions/tosessionlist"/> 
 	         <mvc:mapping path="/menu/toMenuList"/> 
 	         <mvc:mapping path="/role/toRoleList"/>
 	         <mvc:mapping path="/details/**"/>  
 	         <mvc:mapping path="/irecord/toImportRecordList"/>  
 	         <bean id="loginInterceptor" class="com.mj.report.Interceptor.CommonInterceptor"/> 
 	     </mvc:interceptor> 
 	     <!-- 手机端用户信息验证 -->
<!--  	     <mvc:interceptor> -->
<!--  	     	<mvc:mapping path="/mobile/**"/> -->
<!--  	     	<bean id="userAppCheck" class="com.mj.report.Interceptor.UserAppInterceptor"/> -->
<!--  	     </mvc:interceptor> -->
    </mvc:interceptors>  

</beans>