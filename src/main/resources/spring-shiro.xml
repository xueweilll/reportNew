<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
     
     
  	 
  	<!-- 缓存管理 -->  
<!--      <bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager">  -->
     <bean id="cacheManager" class="com.mj.report.security.springCache.SpringCacheManagerWrapper"> 
     	<property name="cacheManager" ref="springCacheManager"/> 
    </bean>  
  	
    <!-- 凭证匹配器。数据库保存的密码是使用MD5算法加密的，所以这里需要配置一个密码匹配对象 -->  
     <bean id="credentialsMatcher" class="com.mj.report.security.credential.HCMatcher">
     	<constructor-arg ref="cacheManager"/>
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
     </bean>
  
	     <!--   
		      同样可以使用Shiro自带的JdbcRealm类  <bean id="jdbcRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">   
		      指定密码匹配所需要用到的加密对象  
		      指定存储用户、角色、权限许可的数据源及相关查询语句  
	     -->  
	   <!-- Realm实现 -->
    <bean id="myShiroRealm" class="com.mj.report.security.realm.MyShiroRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <property name="cachingEnabled" value="false"/>
        <!--<property name="authenticationCachingEnabled" value="true"/>-->
        <!--<property name="authenticationCacheName" value="authenticationCache"/>-->
        <!--<property name="authorizationCachingEnabled" value="true"/>-->
        <!--<property name="authorizationCacheName" value="authorizationCache"/>-->
    </bean>
  	
  	<!-- 会话ID生成器 -->
 	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
 	
 	    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie"> 
        <constructor-arg value="sid"/> 
        <property name="httpOnly" value="true"/> 
        <property name="maxAge" value="-1"/><!-- maxAge=-1表示浏览器关闭时失效此Cookie -->
    </bean> 
	<!-- 记住登录 -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie"> 
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/> 
        <property name="maxAge" value="604800"/><!-- 时效为7天 -->
    </bean>
     <!-- rememberMe管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean> 
  	<!-- 会话DAO -->
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
<!--     <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.MemorySessionDAO "> -->
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>
    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <property name="sessionValidationInterval" value="1800000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>
  	 <!-- 会话管理器  会话管理器管理着应用中所有Subject的会话的创建、维护、删除、失效、验证-->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="1800000"/><!-- 30分钟 -->
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionDAO" ref="sessionDAO"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>
  	
    <!-- Shiro安全管理器 -->  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
        	<!-- ref对应写的  MyShirorealm -->  
        <property name="realm" ref="myShiroRealm"></property>
        <property name="sessionManager" ref="sessionManager"/>    
         	<!-- 使用下面配置的缓存管理器 -->
        <property name="cacheManager" ref="cacheManager"></property>
        	<!-- 记住登录 -->
        <property name="rememberMeManager" ref="rememberMeManager"/>
          
    </bean>  
  	
  	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>
  
  	 <!-- 基于Form表单的身份验证过滤器 -->
    <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
		<property name="rememberMeParam" value="rememberMe"/>
        <property name="loginUrl" value="/user/login"/>
    </bean>
    
    <!-- 根据当前登录用户身份获取User信息放入request；然后就可以通过request获取User。  -->
    <bean id="sysUserFilter" class="com.mj.report.security.shiro.filter.SysUserFilter"/>
    <!-- 强制用户退出 -->
    <bean id="forceLogoutFilter" class="com.mj.report.security.shiro.filter.ForceLogoutFilter"/>
    <!-- 用于控制并发登录人数 -->
    <bean id="kickoutSessionControlFilter" class="com.mj.report.security.shiro.filter.KickoutFilter">  
        <property name="cacheManager" ref="cacheManager"/> <!-- 用于保存用户—会话之间的关系 --> 
        <property name="sessionManager" ref="sessionManager"/>  <!-- 用于根据会话ID，获取会话进行踢出操作 -->
        <property name="kickoutAfter" value="false"/>  <!-- 是否踢出后来登录的，默认是false；即后者登录的用户踢出前者登录的用户 -->
        <property name="maxSession" value="1"/>  <!-- 同一个用户最大的会话数，默认1；比如2的意思是同一个用户允许最多同时两个人登录 -->
        <property name="kickoutUrl" value="/user/login?kickout=1"/>  <!-- 被踢出后重定向到的地址 -->
    </bean>   
    <!--   
       Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行  
       Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，Shiro对基于Spring的Web应用提供了完美的支持  ，
       id- shiroFilter要和web.xml中配置的过滤器一致 
    -->  
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
        	<!-- Shiro的核心安全接口，这个属性是必须的， 调用配置的权限管理器    -->  
        <property name="securityManager" ref="securityManager"></property>  
        	<!-- 要求登录时的链接(登录页面地址)，非必须的属性，默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->  
        <property name="loginUrl" value="/user/login"></property>  
        	<!-- 登录成功后要跳转的连接(本例中此属性用不到，因为登录成功后的处理逻辑在LoginController里硬编码) -->  
<!--         <property name="successUrl" value="/" ></property>   -->
        	<!-- 用户访问未对其授权的资源时，所显示的连接 -->  
        <property name="unauthorizedUrl" value="/user/"></property>
        <property name="filters">
        	  <util:map>
                <entry key="authc" value-ref="formAuthenticationFilter"/><!-- 表单身份认证 -->
                <entry key="sysUser" value-ref="sysUserFilter"/>         <!-- 注入当前用户信息 -->   
                <entry key="forceLogout" value-ref="forceLogoutFilter"/> <!-- 踢出用户控制 --> 
                <entry key="kickout" value-ref="kickoutSessionControlFilter"/> <!-- 并发人数控制 -->
              </util:map>
        </property>
        	<!-- 权限配置 -->  
        	<!-- 拦截器的优先级是从上至下,如果有匹配的拦截器就会返回 -->
        <property name="filterChainDefinitions">  
            <value>
            	/user/logout=anon
            	/styles/** = anon  <!-- 匿名 -->
                /user/login = authc 
         		/** = sysUser,forceLogout,kickout,user  <!-- 任何请求都要经过认证-->
            </value>  
        </property>  
    </bean> 
	
	  <!-- LifecycleBeanPostProcessor用于在实现了Initializable接口的Shiro bean初始化时调用Initializable接口回调，
     								在实现了Destroyable接口的Shiro bean销毁时调用 Destroyable接口回调 -->                   
   	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>
</beans>